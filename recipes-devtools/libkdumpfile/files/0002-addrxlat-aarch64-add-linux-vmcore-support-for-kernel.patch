From 08809673533621a928c634df0507a3eb1821ab38 Mon Sep 17 00:00:00 2001
From: Alexander Kamensky <alexander.kamensky42@gmail.com>
Date: Fri, 4 Dec 2020 12:48:35 -0800
Subject: [PATCH 2/2] addrxlat aarch64: add linux vmcore support for kernels
 starting with 4.12

Aarch64 read vmcoreinfo VA_BITS, kimage_voffset, PHYS_OFFSET to set up
swapper_pg_dir physical address, layout, levels. Set up aarch64 page
format.

Note it will work only with vmcores produced by kernels version 4.12
and above. Previous kernel version vmcores do not have VA_BITS,
kimage_voffset, and PHYS_OFFSET which we rely upon.

Signed-off-by: Alexander Kamensky <alexander.kamensky42@gmail.com>
---
 src/addrxlat/aarch64.c       | 199 +++++++++++++++++++++++++++++++++++
 src/addrxlat/addrxlat-priv.h |   2 +
 src/addrxlat/sys.c           |   2 +
 3 files changed, 203 insertions(+)

diff --git a/src/addrxlat/aarch64.c b/src/addrxlat/aarch64.c
index 099a803..a95a28d 100644
--- a/src/addrxlat/aarch64.c
+++ b/src/addrxlat/aarch64.c
@@ -31,6 +31,7 @@
 #include <stdlib.h>
 
 #include "addrxlat-priv.h"
+#include <linux/version.h>
 
 /* Maximum physical address bits (architectural limit) */
 #define PA_MAX_BITS	48
@@ -140,3 +141,201 @@ pgt_aarch64(addrxlat_step_t *step)
 
 	return ADDRXLAT_OK;
 }
+
+#define is_linear_addr(addr, kernel_ver, va_bits)		   \
+	(((kernel_ver) < KERNEL_VERSION(5, 4, 0)) ?		   \
+	 (!!((unsigned long)(addr) & (1UL << ((va_bits) - 1)))) :  \
+	 (!((unsigned long)(addr) & (1UL << ((va_bits) - 1)))))
+
+static unsigned long
+get_page_offset(unsigned long kernel_ver, addrxlat_addr_t va_bits) {
+	unsigned long page_offset;
+
+	if (kernel_ver < KERNEL_VERSION(5, 4, 0))
+		page_offset = ((0xffffffffffffffffUL) -
+				((1UL) << (va_bits - 1)) + 1);
+	else
+		page_offset = (-(1UL << va_bits));
+	return page_offset;
+}
+
+/** Determine Linux page table root.
+ * @param ctl	     Initialization data.
+ * @param[out] root  Page table root address (set on successful return).
+ * @returns	     Error status.
+ */
+static addrxlat_status
+get_linux_pgtroot(struct os_init_data *ctl, addrxlat_fulladdr_t *root)
+{
+	addrxlat_status status;
+	addrxlat_addr_t root_va;
+
+	addrxlat_addr_t va_bits;
+	addrxlat_addr_t phys_base;
+	addrxlat_addr_t kimage_voffset;
+	int no_kimage_voffset = 0;
+
+	unsigned long page_offset;
+	unsigned long kernel_ver;
+
+
+	status = get_symval(ctl->ctx, "swapper_pg_dir",
+			    &root_va);
+	if (status != ADDRXLAT_OK)
+		return set_error(ctl->ctx, status,
+				 "Cannot determine page table virtual address");
+
+	/*
+	 * This code will only work with vmcores produced by
+	 * Linux Kernel versions 4.12 and above. Makedumpfile
+	 * for kernels before 4.12 uses a heuristic based on
+	 * reading vmcore load segment addressess and finds
+	 * va_bits and phys_offset. This code does not support
+	 * such logic.
+	 */
+	status = get_number(ctl->ctx, "VA_BITS",
+			    &va_bits);
+	if (status != ADDRXLAT_OK)
+		return set_error(ctl->ctx, status,
+				 "Cannot determine VA_BITS");
+
+	status = get_number(ctl->ctx, "kimage_voffset" ,
+			    &kimage_voffset);
+	if (status != ADDRXLAT_OK)
+		 no_kimage_voffset = 1;
+
+	kernel_ver = ctl->osdesc->ver;
+
+
+	if (no_kimage_voffset || is_linear_addr(root_va, kernel_ver, va_bits)) {
+		status = get_number(ctl->ctx, "PHYS_OFFSET" ,
+				    &phys_base);
+		if (status != ADDRXLAT_OK)
+			return set_error(ctl->ctx, status,
+				 "Cannot determine PHYS_OFFSET");
+
+		page_offset = get_page_offset(kernel_ver, va_bits);
+
+		if (kernel_ver < KERNEL_VERSION(5, 4, 0)) {
+			 root->addr = ((root_va & ~page_offset) + phys_base);
+		} else {
+			 root->addr =  (root_va + phys_base - page_offset);
+		}
+	} else {
+	    root->addr = root_va - kimage_voffset;
+	}
+
+	root->as =  ADDRXLAT_KPHYSADDR;
+
+	return ADDRXLAT_OK;
+}
+
+/* Maximum physical address bits (architectural limit) */
+#define PHYSADDR_BITS_MAX	52
+#define PHYSADDR_MASK		ADDR_MASK(PHYSADDR_BITS_MAX)
+#define VIRTADDR_MAX		UINT64_MAX
+
+
+/** Initialize a translation map for Linux/aarch64.
+ * @param ctl  Initialization data.
+ * @returns	  Error status.
+ */
+static addrxlat_status
+map_linux_aarch64(struct os_init_data *ctl)
+{
+	static const addrxlat_paging_form_t aarch64_pf = {
+		.pte_format = ADDRXLAT_PTE_AARCH64,
+		.nfields = 5,
+		.fieldsz = { 12, 9, 9, 9, 9, 9 }
+	};
+
+	/*
+	 * Generic aarch64 layout, depends on current va_bits
+	 *
+	 * Aarch64 kernel does have a linear mapping region, the location
+	 * of which changed in the 5.4 kernel. But since it is covered
+	 * by swapper pgt anyway we don't bother to reflect it here.
+	 */
+	struct sys_region aarch64_layout_generic[] = {
+	    {  0,  0,			/* lower half	    */
+	       ADDRXLAT_SYS_METH_PGT },
+
+	    {  0,  VIRTADDR_MAX,	 /* higher half	     */
+	       ADDRXLAT_SYS_METH_PGT },
+	    SYS_REGION_END
+	};
+
+	addrxlat_map_t *map;
+	addrxlat_meth_t *meth;
+	addrxlat_status status;
+	addrxlat_addr_t va_bits;
+
+	meth = &ctl->sys->meth[ADDRXLAT_SYS_METH_PGT];
+	meth->kind = ADDRXLAT_PGT;
+	meth->target_as = ADDRXLAT_MACHPHYSADDR;
+
+	if (ctl->popt.val[OPT_rootpgt].set)
+		meth->param.pgt.root = ctl->popt.val[OPT_rootpgt].fulladdr;
+	else {
+		status = get_linux_pgtroot(ctl, &meth->param.pgt.root);
+		if (status != ADDRXLAT_OK)
+			return status;
+	}
+
+	meth->param.pgt.pte_mask =
+		opt_num_default(&ctl->popt, OPT_pte_mask, 0);
+	meth->param.pgt.pf = aarch64_pf;
+
+	status = get_number(ctl->ctx, "VA_BITS",
+			    &va_bits);
+	if (status != ADDRXLAT_OK)
+		return set_error(ctl->ctx, status,
+				 "Cannot determine VA_BITS");
+
+	if (ctl->popt.val[OPT_levels].set) {
+		long levels = ctl->popt.val[OPT_levels].num;
+		if (levels < 3 || levels > 5)
+			return bad_paging_levels(ctl->ctx, levels);
+		meth->param.pgt.pf.nfields = levels + 1;
+	} else
+		meth->param.pgt.pf.nfields = ((va_bits - 12) / 9) + 1;
+
+	/* layout depends on current value of va_bits */
+	aarch64_layout_generic[0].last =  ~(-(1ull) << (va_bits));
+	aarch64_layout_generic[1].first =  (-(1ull) << (va_bits));
+
+	status = sys_set_layout(ctl, ADDRXLAT_SYS_MAP_HW,
+				aarch64_layout_generic);
+	if (status != ADDRXLAT_OK)
+		return status;
+
+	map = internal_map_copy(ctl->sys->map[ADDRXLAT_SYS_MAP_HW]);
+	if (!map)
+		return set_error(ctl->ctx, ADDRXLAT_ERR_NOMEM,
+				 "Cannot duplicate hardware mapping");
+	ctl->sys->map[ADDRXLAT_SYS_MAP_KV_PHYS] = map;
+
+	status = sys_set_physmaps(ctl, PHYSADDR_MASK);
+	if (status != ADDRXLAT_OK)
+		return status;
+
+	return ADDRXLAT_OK;
+}
+
+
+/** Initialize a translation map for an aarch64 OS.
+ * @param ctl  Initialization data.
+ * @returns    Error status.
+ */
+addrxlat_status
+sys_aarch64(struct os_init_data *ctl)
+{
+	switch (ctl->osdesc->type) {
+	case ADDRXLAT_OS_LINUX:
+		return map_linux_aarch64(ctl);
+
+	default:
+		return set_error(ctl->ctx, ADDRXLAT_ERR_NOTIMPL,
+				 "OS type not implemented");
+	}
+}
diff --git a/src/addrxlat/addrxlat-priv.h b/src/addrxlat/addrxlat-priv.h
index fee6389..0b760ad 100644
--- a/src/addrxlat/addrxlat-priv.h
+++ b/src/addrxlat/addrxlat-priv.h
@@ -460,6 +460,8 @@ struct os_init_data {
  */
 typedef addrxlat_status sys_arch_fn(struct os_init_data *ctl);
 
+INTERNAL_DECL(sys_arch_fn, sys_aarch64, );
+
 INTERNAL_DECL(sys_arch_fn, sys_ia32, );
 
 INTERNAL_DECL(sys_arch_fn, sys_ppc64, );
diff --git a/src/addrxlat/sys.c b/src/addrxlat/sys.c
index 77e7bad..e9cc006 100644
--- a/src/addrxlat/sys.c
+++ b/src/addrxlat/sys.c
@@ -98,6 +98,8 @@ addrxlat_sys_os_init(addrxlat_sys_t *sys, addrxlat_ctx_t *ctx,
 		arch_fn = sys_s390x;
 	else if (!strcmp(osdesc->arch, "ppc64"))
 		arch_fn = sys_ppc64;
+	else if (!strcmp(osdesc->arch, "aarch64"))
+		arch_fn = sys_aarch64;
 	else
 		return set_error(ctx, ADDRXLAT_ERR_NOTIMPL,
 				"Unsupported architecture");
-- 
2.26.2

