From 8ee8ab3799b0fb1f5f449dbbac839d8d37333265 Mon Sep 17 00:00:00 2001
From: Jeff Mahoney <jeffm@suse.com>
Date: Wed, 15 May 2019 18:14:34 -0400
Subject: [PATCH 24/24] gdb-python: add gdb.NotAvailableError exception

Internally, gdb differentiates between exceptions but those
differentiations are lost when crossing into Python code.  Client code
can make use of the knowledge that a value is unavailable.

Signed-off-by: Jeff Mahoney <jeffm@suse.com>
---
 gdb/doc/python.texi          |  4 ++++
 gdb/python/py-utils.c        |  2 ++
 gdb/python/python-internal.h |  1 +
 gdb/python/python.c          | 10 ++++++++++
 4 files changed, 17 insertions(+)

diff --git a/gdb/doc/python.texi b/gdb/doc/python.texi
index 06b48414cac..a220f81752b 100644
--- a/gdb/doc/python.texi
+++ b/gdb/doc/python.texi
@@ -527,6 +527,10 @@ operation tried to access invalid memory in the inferior.
 @item KeyboardInterrupt
 User interrupt (via @kbd{C-c} or by typing @kbd{q} at a pagination
 prompt) is translated to a Python @code{KeyboardInterrupt} exception.
+
+@item gdb.NotAvailableError
+This is a subclass of @code{gdb.error} which is thrown when the contents
+of a value are not available.
 @end ftable
 
 In all cases, your exception handler will see the @value{GDBN} error
diff --git a/gdb/python/py-utils.c b/gdb/python/py-utils.c
index ed4c6627add..0b7ed34bbf9 100644
--- a/gdb/python/py-utils.c
+++ b/gdb/python/py-utils.c
@@ -237,6 +237,8 @@ gdbpy_convert_exception (const struct gdb_exception &exception)
     exc_class = PyExc_KeyboardInterrupt;
   else if (exception.error == MEMORY_ERROR)
     exc_class = gdbpy_gdb_memory_error;
+  else if (exception.error == NOT_AVAILABLE_ERROR)
+    exc_class = gdbpy_gdb_not_available_error;
   else
     exc_class = gdbpy_gdb_error;
 
diff --git a/gdb/python/python-internal.h b/gdb/python/python-internal.h
index 169cc96ee9f..412558b96c0 100644
--- a/gdb/python/python-internal.h
+++ b/gdb/python/python-internal.h
@@ -775,6 +775,7 @@ extern PyObject *gdbpy_value_cst;
 extern PyObject *gdbpy_gdb_error;
 extern PyObject *gdbpy_gdb_memory_error;
 extern PyObject *gdbpy_gdberror_exc;
+extern PyObject *gdbpy_gdb_not_available_error;
 
 extern void gdbpy_convert_exception (const struct gdb_exception &)
     CPYCHECKER_SETS_EXCEPTION;
diff --git a/gdb/python/python.c b/gdb/python/python.c
index ec7e10e8272..2a3c565a976 100644
--- a/gdb/python/python.c
+++ b/gdb/python/python.c
@@ -130,6 +130,9 @@ PyObject *gdbpy_gdb_error;
 /* The `gdb.MemoryError' exception.  */
 PyObject *gdbpy_gdb_memory_error;
 
+/* The `gdb.NotAvailableError' exception.  */
+PyObject *gdbpy_gdb_not_available_error;
+
 static script_sourcer_func gdbpy_source_script;
 static objfile_script_sourcer_func gdbpy_source_objfile_script;
 static objfile_script_executor_func gdbpy_execute_objfile_script;
@@ -1652,6 +1655,13 @@ do_start_initialization ()
 				 gdbpy_gdb_memory_error) < 0)
     return false;
 
+  gdbpy_gdb_not_available_error = PyErr_NewException ("gdb.NotAvailableError",
+					       gdbpy_gdb_error, NULL);
+  if (gdbpy_gdb_not_available_error == NULL
+      || gdb_pymodule_addobject (gdb_module, "NotAvailableError",
+				 gdbpy_gdb_not_available_error) < 0)
+    return false;
+
   gdbpy_gdberror_exc = PyErr_NewException ("gdb.GdbError", NULL, NULL);
   if (gdbpy_gdberror_exc == NULL
       || gdb_pymodule_addobject (gdb_module, "GdbError",
-- 
2.26.2

