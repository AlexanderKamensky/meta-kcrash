From 20dfa8d2f68b38474e65193d98bde7e6d92f9ff1 Mon Sep 17 00:00:00 2001
From: Jeff Mahoney <jeffm@suse.com>
Date: Sat, 13 Apr 2019 23:01:52 -0400
Subject: [PATCH 09/24] py-type: gdbpy_lookup_type accept None as NULL

gdb.lookup_type already handles an absent block parameter as NULL.  It
should also accept None as NULL, allowing callers to avoid jumping
through hoops to make unqualified lookups in a generic way.

Signed-off-by: Jeff Mahoney <jeffm@suse.com>
---
 gdb/doc/python.texi  | 4 ++--
 gdb/python/py-type.c | 2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/gdb/doc/python.texi b/gdb/doc/python.texi
index 039cfeaa56b..8240cd10092 100644
--- a/gdb/doc/python.texi
+++ b/gdb/doc/python.texi
@@ -1042,8 +1042,8 @@ module:
 @defun gdb.lookup_type (name @r{[}, block@r{]})
 This function looks up a type by its @var{name}, which must be a string.
 
-If @var{block} is given, then @var{name} is looked up in that scope.
-Otherwise, it is searched for globally.
+If @var{block} is given as a @code{gdb.Block}, then @var{name} is looked up in that scope.  Otherwise, if it is absent or is @code{None}, it is
+searched for globally.
 
 Ordinarily, this function will return an instance of @code{gdb.Type}.
 If the named type cannot be found, it will throw an exception.
diff --git a/gdb/python/py-type.c b/gdb/python/py-type.c
index b19cad098a4..b7700aed583 100644
--- a/gdb/python/py-type.c
+++ b/gdb/python/py-type.c
@@ -1376,7 +1376,7 @@ gdbpy_lookup_type (PyObject *self, PyObject *args, PyObject *kw)
 					&type_name, &block_obj))
     return NULL;
 
-  if (block_obj)
+  if (block_obj && block_obj != Py_None)
     {
       block = block_object_to_block (block_obj);
       if (! block)
-- 
2.26.2

