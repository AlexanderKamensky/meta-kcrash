From 66581ca77c237828fe3e9c63b8a9528b3e2f51f1 Mon Sep 17 00:00:00 2001
From: Jeff Mahoney <jeffm@suse.com>
Date: Mon, 23 Mar 2020 21:31:44 -0400
Subject: [PATCH 20/24] py-inferior/py-infthread: add executing attribute

The attribute is an interface for set_executing().
---
 gdb/python/py-inferior.c  | 53 +++++++++++++++++++++++++++++++++++++--
 gdb/python/py-infthread.c | 51 +++++++++++++++++++++++++++++++++++--
 2 files changed, 100 insertions(+), 4 deletions(-)

diff --git a/gdb/python/py-inferior.c b/gdb/python/py-inferior.c
index 266aa0d5270..7b97d19c77c 100644
--- a/gdb/python/py-inferior.c
+++ b/gdb/python/py-inferior.c
@@ -75,13 +75,13 @@ extern PyTypeObject membuf_object_type
     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF ("membuf_object");
 
 /* Require that INFERIOR be a valid inferior ID.  */
-#define INFPY_REQUIRE_VALID(Inferior)				\
+#define INFPY_REQUIRE_VALID_RET(Inferior, ret)			\
   do {								\
     if (!Inferior->inferior)					\
       {								\
 	PyErr_SetString (PyExc_RuntimeError,			\
 			 _("Inferior no longer exists."));	\
-	return NULL;						\
+	return ret;						\
       }								\
   } while (0)
 
@@ -96,6 +96,9 @@ extern PyTypeObject membuf_object_type
     }                                                                         \
   while (0)
 
+#define INFPY_REQUIRE_VALID(Inferior)				\
+	INFPY_REQUIRE_VALID_RET(Inferior, NULL)
+
 static void
 python_on_normal_stop (struct bpstats *bs, int print_frame)
 {
@@ -558,6 +561,50 @@ infpy_get_progspace (PyObject *self, void *closure)
   return pspace_to_pspace_object (pspace).release ();
 }
 
+static PyObject *
+infpy_get_executing (PyObject *self, void *closure)
+{
+  inferior_object *inf = (inferior_object *) self;
+
+  INFPY_REQUIRE_VALID (inf);
+
+  try
+    {
+      target_update_thread_list ();
+    }
+  catch (const gdb_exception &except)
+    {
+      GDB_PY_HANDLE_EXCEPTION (except);
+    }
+  return PyBool_FromLong(threads_are_executing());
+}
+
+static int
+infpy_set_executing (PyObject *self, PyObject *newvalue, void *ignore)
+{
+  inferior_object *inf = (inferior_object *) self;
+
+  INFPY_REQUIRE_VALID_RET(inf, -1);
+
+  if (!PyBool_Check (newvalue))
+    {
+      PyErr_SetString (PyExc_TypeError, "requires Bool");
+      return -1;
+    }
+
+  try
+    {
+      ptid_t ptid(inf->inferior->pid, 0, 0);
+      set_executing (ptid, newvalue == Py_True);
+    }
+  catch (const gdb_exception &except)
+    {
+      GDB_PY_SET_HANDLE_EXCEPTION (except);
+    }
+
+  return 0;
+}
+
 static int
 build_inferior_list (struct inferior *inf, void *arg)
 {
@@ -1033,6 +1080,8 @@ static gdb_PyGetSetDef inferior_object_getset[] =
   { "was_attached", infpy_get_was_attached, NULL,
     "True if the inferior was created using 'attach'.", NULL },
   { "progspace", infpy_get_progspace, NULL, "Program space of this inferior" },
+  { "executing", infpy_get_executing, infpy_set_executing,
+    "True if there are threads executing." },
   { NULL }
 };
 
diff --git a/gdb/python/py-infthread.c b/gdb/python/py-infthread.c
index a471023f263..8d6b855e9b4 100644
--- a/gdb/python/py-infthread.c
+++ b/gdb/python/py-infthread.c
@@ -28,16 +28,19 @@ extern PyTypeObject thread_object_type
     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF ("thread_object");
 
 /* Require that INFERIOR be a valid inferior ID.  */
-#define THPY_REQUIRE_VALID(Thread)				\
+#define THPY_REQUIRE_VALID_RET(Thread, ret)			\
   do {								\
     if (!Thread->thread)					\
       {								\
 	PyErr_SetString (PyExc_RuntimeError,			\
 			 _("Thread no longer exists."));	\
-	return NULL;						\
+	return ret;						\
       }								\
   } while (0)
 
+#define THPY_REQUIRE_VALID(Thread)				\
+	THPY_REQUIRE_VALID_RET(Thread, NULL)
+
 gdbpy_ref<thread_object>
 create_thread_object (struct thread_info *tp)
 {
@@ -344,6 +347,49 @@ thpy_get_registers (PyObject *self, void *closure)
     return PyDictProxy_New(d);
 }
 
+static PyObject *
+thpy_get_executing (PyObject *self, void *closure)
+{
+  thread_object *obj = (thread_object *) self;
+  PyObject *ret = Py_False;
+
+  THPY_REQUIRE_VALID(obj);
+
+  if (obj->thread->executing)
+    ret = Py_True;
+
+  Py_INCREF(ret);
+  return ret;
+}
+
+static int
+thpy_set_executing (PyObject *self, PyObject *newvalue, void *ignore)
+{
+  thread_object *thread_obj = (thread_object *) self;
+
+  THPY_REQUIRE_VALID_RET(thread_obj, -1);
+
+  if (!PyBool_Check (newvalue))
+    {
+      PyErr_SetString (PyExc_TypeError, "requires Bool");
+      return -1;
+    }
+
+  try
+    {
+      /*
+       * We do a needless search here, but we can't set
+       * threads_executing directly.
+       */
+      set_executing (thread_obj->thread->ptid, newvalue == Py_True);
+    }
+  catch (const gdb_exception &except)
+    {
+      GDB_PY_SET_HANDLE_EXCEPTION (except);
+    }
+  return 0;
+}
+
 /* Return a reference to a new Python object representing a ptid_t.
    The object is a tuple containing (pid, lwp, tid). */
 PyObject *
@@ -403,6 +449,7 @@ static gdb_PyGetSetDef thread_object_getset[] =
   { "inferior", thpy_get_inferior, NULL,
     "The Inferior object this thread belongs to.", NULL },
   { "registers", thpy_get_registers, NULL, "Registers for this thread.", NULL },
+  { "executing", thpy_get_executing, thpy_set_executing, "Execution state of this thread.", NULL },
 
   { NULL }
 };
-- 
2.26.2

