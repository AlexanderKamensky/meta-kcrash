From fe6a0c856cf6911c5684c5cd737d444d318cbfa9 Mon Sep 17 00:00:00 2001
From: Jeff Mahoney <jeffm@suse.com>
Date: Tue, 9 Feb 2016 01:01:47 -0500
Subject: [PATCH 19/24] py-thread: add interface to create threads and
 associate them with python objects

---
 gdb/doc/python.texi          |  10 ++++
 gdb/python/py-inferior.c     | 100 +++++++++++++++++++++++++++++++++++
 gdb/python/py-inferior.h     |  33 ++++++++++++
 gdb/python/py-infthread.c    |  15 ++++--
 gdb/python/py-target.c       |   9 ++++
 gdb/python/python-internal.h |   8 +++
 6 files changed, 171 insertions(+), 4 deletions(-)
 create mode 100644 gdb/python/py-inferior.h

diff --git a/gdb/doc/python.texi b/gdb/doc/python.texi
index cd411145c3b..ff23d134ac8 100644
--- a/gdb/doc/python.texi
+++ b/gdb/doc/python.texi
@@ -2997,6 +2997,14 @@ as a whole.  Some platforms can have multiple architectures in a
 single address space, so this may not match the architecture of a
 particular frame (@pxref{Frames In Python}).
 @end defun
+@findex Inferior.new_thread
+@defun Inferior.new_thread (ptid-tuple [, info])
+This method creates a new thread object within @value{GDBN} and assigns it
+the ptid contained in ptid-tuple.
+
+This method will raise @code{AttributeError} if the current target is not
+derived from @code{gdb.Target}.
+@end defun
 
 @findex Inferior.read_memory
 @defun Inferior.read_memory (address, length)
@@ -3294,6 +3302,8 @@ The new thread.
 @findex gdb.InferiorThread
 Python scripts can access information about, and manipulate inferior threads
 controlled by @value{GDBN}, via objects of the @code{gdb.InferiorThread} class.
+@code{gdb.InferiorThread} objects can have arbitrary attributed attached to
+them.
 
 The following thread-related functions are available in the @code{gdb}
 module:
diff --git a/gdb/python/py-inferior.c b/gdb/python/py-inferior.c
index 4adc5d6f998..266aa0d5270 100644
--- a/gdb/python/py-inferior.c
+++ b/gdb/python/py-inferior.c
@@ -29,6 +29,7 @@
 #include "gdbsupport/gdb_signals.h"
 #include "py-event.h"
 #include "py-stopevent.h"
+#include "py-inferior.h"
 
 struct threadlist_entry
 {
@@ -84,6 +85,17 @@ extern PyTypeObject membuf_object_type
       }								\
   } while (0)
 
+#define INFPY_REQUIRE_PYTARGET(msg)                                           \
+  do {                                                                        \
+    if (!gdbpy_current_target_is_pytarget())                                  \
+      {                                                                       \
+        PyErr_SetString (PyExc_AttributeError,                                \
+                               _("Native targets cannot " #msg "."));     \
+        return NULL;                                                          \
+      }                                                                       \
+    }                                                                         \
+  while (0)
+
 static void
 python_on_normal_stop (struct bpstats *bs, int print_frame)
 {
@@ -416,6 +428,90 @@ infpy_threads (PyObject *self, PyObject *args)
   return tuple;
 }
 
+static PyObject *
+infpy_new_thread (PyObject *self, PyObject *args)
+{
+  struct inferior *inf;
+  struct thread_info *info = NULL;
+  int pid;
+  long lwp;
+  long tid;
+  PyObject *pypriv = Py_None;
+
+  INFPY_REQUIRE_PYTARGET("create threads");
+
+  if (!PyArg_ParseTuple(args, "(ill)|O:ptid",
+      &pid, &lwp, &tid, &pypriv))
+    return NULL;
+
+  inf = current_inferior();
+  if (inf->pid != 0 && inf->pid != pid)
+    {
+      inf = find_inferior_pid (pid);
+      if (!inf)
+        inf = current_inferior ();
+    }
+
+  /* needed? */
+  inferior_appeared (inf, pid);
+
+  try
+    {
+      ptid_t ptid(pid, lwp, tid);
+
+      info = add_thread_silent(ptid);
+
+      if (inferior_ptid == null_ptid)
+        switch_to_thread_no_regs (info);
+    }
+  catch (const gdb_exception &except)
+    {
+      GDB_PY_HANDLE_EXCEPTION(except);
+    }
+
+  return (PyObject *)thread_to_thread_object(info).release();
+}
+
+static PyObject *
+infpy_delete_thread (PyObject *self, PyObject *args)
+{
+  struct thread_info *info = NULL;
+  int pid;
+  long lwp;
+  long tid;
+
+  INFPY_REQUIRE_PYTARGET("delete threads");
+
+  if (!PyArg_ParseTuple(args, "(ill)|O:ptid", &pid, &lwp, &tid))
+    return NULL;
+
+  try
+    {
+      ptid_t ptid(pid, lwp, tid);
+
+      info = find_thread_ptid(ptid);
+      if (!info)
+	{
+	  PyErr_SetString (PyExc_RuntimeError, _("Thread does not exist."));
+	  return NULL;
+	}
+
+
+      delete_thread_silent(info);
+      if (ptid == inferior_ptid)
+	{
+	  inferior_ptid = null_ptid;
+	}
+    }
+  catch (const gdb_exception &except)
+    {
+      GDB_PY_HANDLE_EXCEPTION(except);
+    }
+
+  Py_RETURN_NONE;
+}
+
+
 static PyObject *
 infpy_get_num (PyObject *self, void *closure)
 {
@@ -947,6 +1043,10 @@ static PyMethodDef inferior_object_methods[] =
 Return true if this inferior is valid, false if not." },
   { "threads", infpy_threads, METH_NOARGS,
     "Return all the threads of this inferior." },
+  { "new_thread", infpy_new_thread, METH_VARARGS,
+    "Adds a new thread to this inferior with optional object(s)" },
+  { "delete_thread", infpy_delete_thread, METH_VARARGS,
+    "Deletes a thread from this inferior" },
   { "read_memory", (PyCFunction) infpy_read_memory,
     METH_VARARGS | METH_KEYWORDS,
     "read_memory (address, length) -> buffer\n\
diff --git a/gdb/python/py-inferior.h b/gdb/python/py-inferior.h
new file mode 100644
index 00000000000..32975d1e84b
--- /dev/null
+++ b/gdb/python/py-inferior.h
@@ -0,0 +1,33 @@
+/* Gdb/Python header for private use by Python module.
+
+   Copyright (C) 2008-2019 Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#ifndef PYTHON_PYTHON_INFERIOR_H
+#define PYTHON_PYTHON_INFERIOR_H
+
+#include "python-internal.h"
+#include "gdbthread.h"
+struct infpy_thread_info : public private_thread_info
+{
+	PyObject *object;
+	~infpy_thread_info() {
+	      Py_DECREF (object);
+	};
+};
+
+#endif /* PYTHON_PYTHON_INFERIOR_H */
diff --git a/gdb/python/py-infthread.c b/gdb/python/py-infthread.c
index cac93893f8f..a471023f263 100644
--- a/gdb/python/py-infthread.c
+++ b/gdb/python/py-infthread.c
@@ -21,6 +21,7 @@
 #include "gdbarch.h"
 #include "gdbthread.h"
 #include "inferior.h"
+#include "py-inferior.h"
 #include "python-internal.h"
 
 extern PyTypeObject thread_object_type
@@ -53,7 +54,13 @@ create_thread_object (struct thread_info *tp)
   thread_obj->thread = tp;
   thread_obj->inf_obj = (PyObject *) inf_obj.release ();
   thread_obj->register_objs = NULL;
-
+  thread_obj->dict = PyDict_New ();
+  if (thread_obj->dict == NULL)
+    {
+      Py_XDECREF (thread_obj->dict);
+      Py_XDECREF (thread_obj.release ());
+      thread_obj = NULL;
+    }
   return thread_obj;
 }
 
@@ -62,6 +69,7 @@ thpy_dealloc (PyObject *self)
 {
   del_thread_registers ((thread_object *) self);
 
+  Py_DECREF (((thread_object *) self)->dict);
   Py_DECREF (((thread_object *) self)->inf_obj);
   Py_TYPE (self)->tp_free (self);
 }
@@ -394,8 +402,7 @@ static gdb_PyGetSetDef thread_object_getset[] =
     NULL },
   { "inferior", thpy_get_inferior, NULL,
     "The Inferior object this thread belongs to.", NULL },
-  { "registers", thpy_get_registers, NULL, "Registers for this thread.",
-    NULL },
+  { "registers", thpy_get_registers, NULL, "Registers for this thread.", NULL },
 
   { NULL }
 };
@@ -460,7 +467,7 @@ PyTypeObject thread_object_type =
   0,				  /* tp_dict */
   0,				  /* tp_descr_get */
   0,				  /* tp_descr_set */
-  0,				  /* tp_dictoffset */
+  offsetof(thread_object, dict),  /* tp_dictoffset */
   0,				  /* tp_init */
   0				  /* tp_alloc */
 };
diff --git a/gdb/python/py-target.c b/gdb/python/py-target.c
index 46e1a78578c..e1841686691 100644
--- a/gdb/python/py-target.c
+++ b/gdb/python/py-target.c
@@ -1332,3 +1332,12 @@ gdbpy_current_target (PyObject *self, PyObject *args)
 
   return target_obj;
 }
+
+bool
+gdbpy_current_target_is_pytarget(void)
+{
+  target_ops *target = current_top_target ();
+
+  python_target *pytarget = dynamic_cast<python_target *>(target);
+  return pytarget != NULL;
+}
diff --git a/gdb/python/python-internal.h b/gdb/python/python-internal.h
index 95993fd10ab..169cc96ee9f 100644
--- a/gdb/python/python-internal.h
+++ b/gdb/python/python-internal.h
@@ -390,6 +390,12 @@ typedef struct
   /* The thread we represent.  */
   struct thread_info *thread;
 
+  /*
+   * Dictionary holding user-added attributes.
+   * This is the __dict__ attribute of the object.
+   */
+  PyObject *dict;
+
   /* Regcache */
   PyObject *regcache;
 
@@ -405,6 +411,7 @@ typedef struct
 
 struct inferior_object;
 
+
 extern struct cmd_list_element *set_python_list;
 extern struct cmd_list_element *show_python_list;
 
@@ -470,6 +477,7 @@ PyObject *gdbpy_create_ptid_object (ptid_t ptid);
 PyObject *gdbpy_selected_thread (PyObject *self, PyObject *args);
 PyObject *gdbpy_selected_inferior (PyObject *self, PyObject *args);
 PyObject *gdbpy_current_target (PyObject *self, PyObject *args);
+bool gdbpy_current_target_is_pytarget(void);
 PyObject *gdbpy_string_to_argv (PyObject *self, PyObject *args);
 PyObject *gdbpy_parameter_value (enum var_types type, void *var);
 char *gdbpy_parse_command_name (const char *name,
-- 
2.26.2

