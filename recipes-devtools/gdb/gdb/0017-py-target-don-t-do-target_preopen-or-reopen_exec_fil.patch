From 179db4d57be504ad85234f19871c4e0f893082db Mon Sep 17 00:00:00 2001
From: Jeff Mahoney <jeffm@suse.com>
Date: Fri, 10 May 2019 16:38:04 -0400
Subject: [PATCH 17/24] py-target: don't do target_preopen or reopen_exec_file
 when stacking targets

When stacking targets, we don't want to clear the existing target
away.  I've added a stacked_target() callback that causes the
target to skip clearing away the old target if it returns True.

Signed-off-by: Jeff Mahoney <jeffm@suse.com>
---
 gdb/python/py-target.c | 28 ++++++++++++++++++++++++++--
 1 file changed, 26 insertions(+), 2 deletions(-)

diff --git a/gdb/python/py-target.c b/gdb/python/py-target.c
index 8f488590f6c..2fd0db57edf 100644
--- a/gdb/python/py-target.c
+++ b/gdb/python/py-target.c
@@ -159,6 +159,7 @@ python_target::open (const char *argstring, int from_tty)
   PyObject *callback = NULL;
   PyObject *arglist = NULL;
   PyObject *ret = NULL;
+  bool stacked = false;
 
   gdbpy_enter enter_py (target_gdbarch (), current_language);
 
@@ -172,9 +173,32 @@ python_target::open (const char *argstring, int from_tty)
 	error (_("Refusing to replace other target."));
     }
 
-  target_preopen (from_tty);
+  if (pytarget_has_op(stacked_target))
+    {
+      callback = PyObject_GetAttrString (owner, "stacked_target");
+      if (!callback)
+	goto error;
+
+      ret = gdb_PyObject_CallFunction (callback, "()", NULL);
+      if (!ret)
+	goto error;
 
-  reopen_exec_file ();
+      if (!PyBool_Check (ret))
+	{
+	  PyErr_SetString (PyExc_RuntimeError,
+			   "stacked_target callback must return True or False");
+	  goto error;
+	}
+	stacked = ret == Py_True;
+	Py_XDECREF (ret);
+	ret = NULL;
+    }
+
+  if (!stacked)
+    {
+      target_preopen (from_tty);
+      reopen_exec_file ();
+    }
   registers_changed ();
 
   callback = PyObject_GetAttrString (owner, "open");
-- 
2.26.2

